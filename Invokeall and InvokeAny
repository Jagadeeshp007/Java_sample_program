import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class ExecutorServiceExample {
    
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(2);

        List<Callable<String>> tasks = new ArrayList<>();
        tasks.add(new MyCallable("Task 1"));
        tasks.add(new MyCallable("Task 2"));
        tasks.add(new MyCallable("Task 3"));

        try {
            // Invoke all tasks and get the list of Future objects
            List<Future<String>> results = executor.invokeAll(tasks);

            // Print the results
            for (Future<String> result : results) {
                try {
                    System.out.println(result.get());
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
            }

            // Invoke any task and get the result of the first completed task
            String anyResult = executor.invokeAny(tasks);
            System.out.println("Result of any task: " + anyResult);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        executor.shutdown();
    }
}

class MyCallable implements Callable<String> {
    
    private String name;
    
    public MyCallable(String name) {
        this.name = name;
    }
    
    @Override
    public String call() throws Exception {
        Thread.sleep(2000); // Simulating some task
        return "Result of " + name;
    }
}
